xml.instruct! :xml, :version=>"1.0", :encoding=>"UTF-8" 
xml.Workbook({
    'xmlns'      => "urn:schemas-microsoft-com:office:spreadsheet",
    'xmlns:o'    => "urn:schemas-microsoft-com:office:office",
    'xmlns:x'    => "urn:schemas-microsoft-com:office:excel",
    'xmlns:html' => "http:// www.w3.org/TR/REC-html40",
    'xmlns:ss'   => "urn:schemas-microsoft-com:office:spreadsheet"
  }) do

  xml.Styles do
    xml.Style 'ss:ID' => 'Default', 'ss:Name' => 'Normal' do
      xml.Alignment 'ss:Vertical' => 'Bottom'
      xml.Borders
      xml.Font 'ss:FontName' => 'Verdana'
      xml.Interior
      xml.NumberFormat
      xml.Protection
    end
    xml.Style 'ss:ID' => 's22' do
      xml.NumberFormat 'ss:Format' => 'General Date'
    end
  end

  xml.Worksheet 'ss:Name' => 'service'+@start_period.number do
    xml.Table do
      xml.Row do
        xml.Cell do
          xml.Data "summary", 'ss:Type' => 'String'
        end
      end
  
      xml.Row do
        @rowheads =['GMU',"Job code","Client(Eng)","Job Ref","Job Ptr","Job Mgr","contract_number",
          "budgeted_service_fee", "budgeted_expense_fee","service_PFA%","expense_PFA%",
          "estimated_commision","estimated_outsorcing", "contracted_service_fee",  "contracted_expense_fee",
          "created_on", "Service Line","Project status","Fee Beg", "Fee Cum","Fee Sub", "PFA rate",
          "PFA Beg", "PFA Cum","PFA Sub", "commission+outsourcing Beg","commission","outsourcing", "Sub", "Travel Cum",
          "Meal Cum","Per dium Cum", "Expense Beg", "Ticket", "Courrier","Stationery","Postage","Report binding",
          "Payment on be half","Billing Beg",  "SERVICE Billing Cum", "EXPENSE Billing Cum","BT",  " Billing Sub",
          "UFA Beg", "service UFA Cum","expense UFA Cum"
        ]
        for  rowhead in @rowheads
          xml.Cell do
            xml.Data rowhead, 'ss:Type' => 'String'
          end
        end

     
      end
      # Rows
      for record in @projects

        xml.Row do
          xml.Cell do
            xml.Data record.GMU.title, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.job_code, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.client.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.referring.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.partner.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.manager.english_name, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.contract_number, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.budgeted_service_fee, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.budgeted_expense, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.service_PFA, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.expense_PFA, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.estimated_commision, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.estimated_outsorcing, 'ss:Type' => 'String'
          end          
          xml.Cell do
            xml.Data record.contracted_service_fee, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.contracted_expense, 'ss:Type' => 'String'
          end           
          xml.Cell do
            xml.Data record.created_on, 'ss:Type' => 'String'
          end
          #          xml.Cell do
          #            xml.Data record.starting_date, 'ss:Type' => 'String'
          #          end
          #         xml.Cell do
          #          xml.Data record.ending_date, 'ss:Type' => 'String'
          #       end
          xml.Cell do
            xml.Data record.service_code.code, 'ss:Type' => 'String'
          end
          xml.Cell do
            xml.Data record.status.title, 'ss:Type' => 'String'
          end
          @show=0

          # fee
          for fee in @service_pfa
            if record.id.to_s == fee.prj_id.to_s
              xml.Cell do
                xml.Data fee.Beg_service_fee, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data fee.Service_fee, 'ss:Type' => 'Number'
              end
              xml.Cell do
                #sub
              end
              xml.Cell do
                xml.Data record.service_PFA, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data fee.Beg_PFA, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data fee.PFA, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            7.times do |t|
              xml.Cell do
                xml.Data 0, 'ss:Type' => 'Number'
              end
            end
          else
            @show =0
          end


          # commission and outsourcing
          for co_fee in @co_fees
            if record.id.to_s == co_fee.prj_id.to_s
              xml.Cell do
                xml.Data co_fee.CO_Beg, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data co_fee.commission, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data co_fee.outsourcing, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            4.times do |t|
              xml.Cell do
                xml.Data 0, 'ss:Type' => 'Number'
              end
            end
          else
            @show =0
          end


          for reimb in @reimbs
            if record.id.to_s == reimb.prj_id.to_s
              xml.Cell do
                xml.Data reimb.cum_travel, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data reimb.cum_meal, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data reimb.cum_per_dium, 'ss:Type' => 'Number'
              end
              @show=1
            end
          end
          if @show == 0
            3.times do |t|
              xml.Cell do
                xml.Data 0, 'ss:Type' => 'Number'
              end
            end
          else
            @show =0
          end

          for expense in @expenses
            if record.id.to_s == expense.prj_id.to_s
              xml.Cell do
                xml.Data expense.Beg_expense, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Ticket, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Courrier, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Stationery, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Postage, 'ss:Type' => 'Number'
              end

              xml.Cell do
                xml.Data expense.Report_binding, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data expense.Payment_on_be_half, 'ss:Type' => 'Number'
              end
              @show=1
            end
          end
          if @show == 0
            7.times do |t|
              xml.Cell do
                xml.Data 0, 'ss:Type' => 'Number'
              end
            end
          else
            @show =0
          end


          #billing
          for billing in @billings
            if record.id.to_s == billing.prj_id.to_s
              xml.Cell do
                xml.Data billing.Beg_service, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data billing.Service_billing, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data billing.Expense_billing, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data billing.BT, 'ss:Type' => 'Number'
              end
              xml.Cell do
                @show=1
              end
            end
          end
          if @show == 0
            5.times do |t|
              xml.Cell do
                xml.Data 0, 'ss:Type' => 'Number'
              end
            end
          else
            @show =0
          end
            
          #########UFA#############
          for ufa in @ufas
            if record.id.to_s == ufa.prj_id.to_s
              xml.Cell do
                xml.Data ufa.Beg_service, 'ss:Type' => 'Number'
              end
              xml.Cell do
                xml.Data ufa.Service_UFA, 'ss:Type' => 'Number'
              end

              xml.Cell do
                xml.Data ufa.Expense_UFA, 'ss:Type' => 'Number'
                @show=1
              end
            end
          end
          if @show == 0
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end
            xml.Cell do
              xml.Data 0, 'ss:Type' => 'Number'
            end

          else
            @show =0
          end
        end

                                  
      end
    end
  end
end
  